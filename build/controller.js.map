{"version":3,"sources":["model.js","utils/formatters.js","view/updateResultsView.js","utils/updateModal.js","view/radioPrograms.js","view/utils.js","view/costInput.js","view/costRange.js","view/paymentInput.js","view/paymentRange.js","view/timeInput.js","view/timeRange.js","controller.js"],"names":["data","selectedProgram","cost","minPrice","maxPrice","minPaymentPercents","maxPaymentPercents","paymentPercents","payment","getMinPayment","getMaxPayment","minYear","maxYear","time","programs","base","it","gov","zero","results","rate","getData","_objectSpread","getResults","setData","newData","console","log","onUpdate","id","months","totalAmount","monthRate","generalRate","Math","pow","monthPayment","overPayment","priceFormatter","Intl","NumberFormat","style","currency","maximumFractionDigits","exports","priceFormatterDecimals","_formatters","require","updateResultsView","document","querySelector","innerHTML","format","_default","default","updateModal","element","dispatchEvent","CustomEvent","bubbles","detail","_updateModal","_interopRequireDefault","obj","__esModule","init","radioBtns","querySelectorAll","_getData$programs","value","innerText","forEach","radioBtn","addEventListener","parseFloat","updateMinPercents","input","cleaveInput","Cleave","numeral","numeralThousandsGroupStyle","delimiter","setRawValue","getRawValue","closest","classList","add","remove","slider","noUiSlider","create","start","connect","tooltips","step","range","min","max","wNumb","decimals","thousand","suffix","on","sliderValue","get","split","parseInt","String","replace","Model","_interopRequireWildcard","_updateResultsView","_radioPrograms","_utils","_costInput","_costRange","_paymentInput","_paymentRange","_timeInput","_timeRange","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_typeof","o","Symbol","iterator","constructor","_regeneratorRuntime","e","t","r","n","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","window","cleaveCost","costInput","sliderCost","costRange","cleavePayment","paymentInput","sliderPayment","paymentRange","cleaveTime","timeInput","sliderTime","timeRange","updateOptions","updateFormAndSliders","openFormBtn","orderForm","submitFormBtn","preventDefault","formData","FormData","_fetchData","_callee","url","checkOnUrl","response","result","_callee$","_context","_checkOnUrl","urlArrayDot","at","newUrl","join","urlArraySlash","location","href","fetch","headers","body","JSON","stringify","form","email","phone","text","removeAttribute","setAttribute","fetchData"],"mappings":"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","file":"controller.js","sourceRoot":"..\\js","sourcesContent":["//* Объект со всей информацией из калькулятора (ставки, размер ставки в %, min & max цене и тд)\r\nlet data = {\r\n  //* Ставка по умолчанию\r\n  selectedProgram: 0.1,\r\n  //* Стартовая стоимость\r\n  cost: 12000000,\r\n  minPrice: 375000,\r\n  maxPrice: 100000000,\r\n  minPaymentPercents: 0.15,\r\n  maxPaymentPercents: 0.9,\r\n  paymentPercents: 0.5,\r\n  payment: 6000000,\r\n  getMinPayment() {\r\n    return this.cost * this.minPaymentPercents;\r\n  },\r\n  getMaxPayment() {\r\n    return this.cost * this.maxPaymentPercents;\r\n  },\r\n  minYear: 1,\r\n  maxYear: 30,\r\n  time: 10,\r\n  //* Ставки\r\n  programs: {\r\n    base: 0.1,\r\n    it: 0.047,\r\n    gov: 0.067,\r\n    zero: 0.12,\r\n  },\r\n};\r\n\r\n//* Объект с результатами расчета\r\nlet results = {\r\n  rate: data.selectedProgram,\r\n};\r\n\r\n//* Метод, с помощью которого мы будем возвращать копию data\r\nfunction getData() {\r\n  return { ...data };\r\n}\r\n\r\n//* Метод, с помощью которого мы будем возвращать копию results\r\nfunction getResults() {\r\n  return { ...results };\r\n}\r\n\r\n//* Метод для обновления объекта data и results (новый данные от взаимодействия с radioBtn (выбор программы (ставка)))\r\nfunction setData(newData) {\r\n  console.log('New Data', newData);\r\n\r\n  if (newData.onUpdate === 'radioProgram') {\r\n    if (newData.id === 'zero-value') {\r\n      data.minPaymentPercents = 0;\r\n    } else {\r\n      data.minPaymentPercents = 0.15;\r\n    }\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputCost' || newData.onUpdate === 'costSlider') {\r\n    //* Обновление цены\r\n    //* Если стоимость меньше мин. цены\r\n    if (newData.cost < data.minPrice) newData.cost = data.minPrice;\r\n\r\n    //* Если стоимость больше макс. цены\r\n    if (newData.cost > data.maxPrice) newData.cost = data.maxPrice;\r\n\r\n    //* Если новая стоимость меньше первоначальной\r\n    if (data.payment > data.getMaxPayment())\r\n      data.payment = data.getMaxPayment();\r\n\r\n    //* Если сумма первоначальной стоимости меньше чем допустимый минимальный платеж\r\n    if (data.payment < data.getMinPayment())\r\n      data.payment = data.getMinPayment();\r\n\r\n    data.paymentPercents = (data.payment * 100) / newData.cost / 100;\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputPayment') {\r\n    //* Пересчитываем %\r\n    newData.paymentPercents = (newData.payment * 100) / data.cost / 100;\r\n\r\n    //* Если % больше 90%\r\n    if (newData.paymentPercents > data.maxPaymentPercents) {\r\n      newData.paymentPercents = data.maxPaymentPercents;\r\n      newData.payment = data.cost * data.maxPaymentPercents;\r\n    }\r\n\r\n    //* Если % меньше минимальных\r\n    if (newData.paymentPercents < data.minPaymentPercents) {\r\n      newData.paymentPercents = data.minPaymentPercents;\r\n      newData.payment = data.cost * data.minPaymentPercents;\r\n    }\r\n  }\r\n\r\n  if (newData.onUpdate === 'paymentSlider') {\r\n    newData.paymentPercents = newData.paymentPercents / 100;\r\n    data.payment = data.cost * newData.paymentPercents;\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputTime') {\r\n    if (newData.time > data.maxYear) newData.time = data.maxYear;\r\n    if (newData.time < data.minYear) newData.time = data.minYear;\r\n  }\r\n\r\n  data = {\r\n    ...data,\r\n    ...newData,\r\n  };\r\n\r\n  //* Расчет ипотеки\r\n  const months = data.time * 12;\r\n  const totalAmount = data.cost - data.payment;\r\n  const monthRate = data.selectedProgram / 12;\r\n  const generalRate = (1 + monthRate) ** months;\r\n  const monthPayment =\r\n    (totalAmount * monthRate * generalRate) / (generalRate - 1);\r\n  const overPayment = monthPayment * months - totalAmount;\r\n\r\n  results = {\r\n    rate: data.selectedProgram,\r\n    totalAmount,\r\n    monthPayment,\r\n    overPayment,\r\n  };\r\n\r\n  console.log('Updated Data', data);\r\n  console.log('New results', results);\r\n}\r\n\r\nexport { getData, getResults, setData };\r\n","const priceFormatter = new Intl.NumberFormat('ru-RU', {\r\n  style: 'currency',\r\n  currency: 'RUB',\r\n  maximumFractionDigits: 0,\r\n});\r\n\r\nconst priceFormatterDecimals = new Intl.NumberFormat('ru-RU', {\r\n  style: 'currency',\r\n  currency: 'RUB',\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport { priceFormatter, priceFormatterDecimals };\r\n","import {\r\n  priceFormatter,\r\n  priceFormatterDecimals,\r\n} from './../utils/formatters.js';\r\n\r\nfunction updateResultsView(results) {\r\n  document.querySelector('#total-percent').innerHTML = results.rate * 100 + '%';\r\n  document.querySelector('#total-month-payment').innerHTML =\r\n    priceFormatterDecimals.format(results.monthPayment);\r\n  document.querySelector('#total-cost').innerHTML = priceFormatter.format(\r\n    results.totalAmount\r\n  );\r\n  document.querySelector('#total-overpayment').innerHTML =\r\n    priceFormatterDecimals.format(results.overPayment);\r\n}\r\n\r\nexport default updateResultsView;\r\n","//* Генерация пользовательского события\r\nfunction updateModal(element, data) {\r\n  element.dispatchEvent(\r\n    new CustomEvent('updateForm', {\r\n      bubbles: true,\r\n      detail: { ...data },\r\n    })\r\n  );\r\n}\r\n\r\nexport default updateModal;\r\n","import updateModal from './../utils/updateModal.js';\r\n\r\n//* Инициализация ставок\r\nfunction init(getData) {\r\n  const radioBtns = document.querySelectorAll('input[name=\"program\"]');\r\n  const { base, it, gov, zero } = getData().programs;\r\n\r\n  //* Установим данный значения в радиокнопки\r\n  document.querySelector('#base-value').value = base;\r\n  document.querySelector('#it-value').value = it;\r\n  document.querySelector('#gov-value').value = gov;\r\n  document.querySelector('#zero-value').value = zero;\r\n\r\n  //* Установим данный значения для пользователя\r\n  document.querySelector('#base-text').innerText = base * 100 + '%';\r\n  document.querySelector('#it-text').innerText = it * 100 + '%';\r\n  document.querySelector('#gov-text').innerText = gov * 100 + '%';\r\n  document.querySelector('#zero-text').innerText = zero * 100 + '%';\r\n\r\n  radioBtns.forEach(function (radioBtn) {\r\n    radioBtn.addEventListener('change', function () {\r\n      updateModal(this, {\r\n        onUpdate: 'radioProgram',\r\n        selectedProgram: parseFloat(this.value),\r\n        id: this.id,\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default init;\r\n","function updateMinPercents(data) {\r\n  document.querySelector('#percents-from').innerText =\r\n    data.minPaymentPercents * 100 + '%';\r\n}\r\n\r\nexport { updateMinPercents };\r\n","import updateModal from './../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  const input = document.querySelector('#input-cost');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  //* Подключаем библиотеку на нужный инпут\r\n  const cleaveInput = new Cleave(input, settings);\r\n\r\n  //* Устанавливаем начальное значение при загрузке страницы\r\n  cleaveInput.setRawValue(data.cost);\r\n\r\n  input.addEventListener('input', function () {\r\n    //* Получаем введенное значение в инпут\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    //* Проверка на мин. и макс. цену\r\n    if (value < data.minPrice || value > data.maxPrice) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (value >= data.minPrice && value <= data.maxPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, { cost: value, onUpdate: 'inputCost' });\r\n  });\r\n\r\n  //* Если ввели сумму больше или меньше чем максимальная - при выходе из инпута убирать красную рамку и менять введенное число на мин или макс\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n    if (value > data.maxPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.maxPrice);\r\n    }\r\n\r\n    if (value < data.minPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.minPrice);\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, {\r\n      cost: +cleaveInput.getRawValue(),\r\n      onUpdate: 'inputCost',\r\n    });\r\n  });\r\n\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModal from './../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  const slider = document.querySelector('#slider-cost');\r\n\r\n  noUiSlider.create(slider, {\r\n    start: data.cost,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 100000,\r\n    range: {\r\n      min: data.minPrice,\r\n      '1%': [400000, 100000],\r\n      '50%': [10000000, 500000],\r\n      max: data.maxPrice,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  slider.noUiSlider.on('slide', function () {\r\n    //* Получаем значение из слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModal(slider, { cost: sliderValue, onUpdate: 'costSlider' });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import updateModal from '../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const input = document.querySelector('#input-downpayment');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  //* Подключаем библиотеку на нужный инпут\r\n  const cleaveInput = new Cleave(input, settings);\r\n\r\n  //* Устанавливаем начальное значение при загрузке страницы\r\n  cleaveInput.setRawValue(getData().payment);\r\n\r\n  input.addEventListener('input', function () {\r\n    //* Получаем введенное значение в инпут\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    //* Проверка на мин. и макс. сумму первого платежа\r\n    if (\r\n      value < getData().getMinPayment() ||\r\n      value > getData().getMaxPayment()\r\n    ) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (\r\n      value >= getData().getMinPayment() &&\r\n      value <= getData().getMaxPayment()\r\n    ) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, { payment: value, onUpdate: 'inputPayment' });\r\n  });\r\n\r\n  //* Если ввели сумму больше или меньше чем максимальная - при выходе из инпута убирать красную рамку и менять введенное число на мин или макс\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n    if (value > getData().getMaxPayment()) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(getData().getMaxPayment());\r\n    }\r\n\r\n    if (value < getData().getMinPayment()) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(getData().getMinPayment());\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, {\r\n      payment: value,\r\n      onUpdate: 'inputPayment',\r\n    });\r\n  });\r\n\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModal from '../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector('#slider-downpayment');\r\n\r\n  noUiSlider.create(slider, {\r\n    start: getData().paymentPercents * 100,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: getData().minPaymentPercents * 100,\r\n      max: getData().maxPaymentPercents * 100,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  slider.noUiSlider.on('slide', function () {\r\n    //* Получаем значение из слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModal(slider, {\r\n      paymentPercents: sliderValue,\r\n      onUpdate: 'paymentSlider',\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import updateModal from '../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  const input = document.querySelector('#input-term');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  //* Подключаем библиотеку на нужный инпут\r\n  const cleaveInput = new Cleave(input, settings);\r\n\r\n  //* Устанавливаем начальное значение при загрузке страницы\r\n  cleaveInput.setRawValue(data.time);\r\n\r\n  input.addEventListener('input', function () {\r\n    //* Получаем введенное значение в инпут\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    //* Проверка на мин. и макс. цену\r\n    if (value < data.minYear || value > data.maxYear) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (value >= data.minYear && value <= data.maxYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, { time: value, onUpdate: 'inputTime' });\r\n  });\r\n\r\n  //* Если ввели сумму больше или меньше чем максимальная - при выходе из инпута убирать красную рамку и менять введенное число на мин или макс\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n    if (value > data.maxYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.maxYear);\r\n    }\r\n\r\n    if (value < data.minYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.minYear);\r\n    }\r\n\r\n    //* Обновить модель\r\n    updateModal(input, {\r\n      time: +cleaveInput.getRawValue(),\r\n      onUpdate: 'inputTime',\r\n    });\r\n  });\r\n\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModal from '../utils/updateModal.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  const slider = document.querySelector('#slider-term');\r\n\r\n  noUiSlider.create(slider, {\r\n    start: data.time,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: data.minYear,\r\n      max: data.maxYear,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  slider.noUiSlider.on('slide', function () {\r\n    //* Получаем значение из слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModal(slider, { time: sliderValue, onUpdate: 'timeSlider' });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import * as Model from './model.js';\r\nimport updateResultsView from './view/updateResultsView.js';\r\nimport programs from './view/radioPrograms.js';\r\nimport { updateMinPercents } from './view/utils.js';\r\n\r\nimport costInput from './view/costInput.js';\r\nimport costRange from './view/costRange.js';\r\n\r\nimport paymentInput from './view/paymentInput.js';\r\nimport paymentRange from './view/paymentRange.js';\r\n\r\nimport timeInput from './view/timeInput.js';\r\nimport timeRange from './view/timeRange.js';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  //* Для получения актуальных свежих данных (копия объекта data)\r\n  const getData = Model.getData;\r\n\r\n  //* Инициализация программ (ставок)\r\n  programs(getData);\r\n\r\n  //* Инициализация costInput\r\n  const cleaveCost = costInput(getData);\r\n  const sliderCost = costRange(getData);\r\n\r\n  //* Init payment input\r\n  const cleavePayment = paymentInput(getData);\r\n  const sliderPayment = paymentRange(getData);\r\n\r\n  //* Init time input\r\n  const cleaveTime = timeInput(getData);\r\n  const sliderTime = timeRange(getData);\r\n\r\n  Model.setData({});\r\n  const results = Model.getResults();\r\n  updateResultsView(results);\r\n\r\n  //* Слушатель пользовательского события, которое обновляет данные\r\n  document.addEventListener('updateForm', (e) => {\r\n    //* Обновление данных (data & results)\r\n    Model.setData(e.detail);\r\n\r\n    const data = Model.getData();\r\n    const results = Model.getResults();\r\n\r\n    //* Обновляем все что связано с внешним видом формы, основываясь на данных из модели\r\n    updateFormAndSliders(data);\r\n\r\n    //* Обновление results block\r\n    updateResultsView(results);\r\n  });\r\n\r\n  function updateFormAndSliders(data) {\r\n    //* Update radio btns\r\n    if (data.onUpdate === 'radioProgram') {\r\n      updateMinPercents(data);\r\n\r\n      //* Update payment slider\r\n      sliderPayment.noUiSlider.updateOptions({\r\n        range: {\r\n          min: data.minPaymentPercents * 100,\r\n          max: data.maxPaymentPercents * 100,\r\n        },\r\n      });\r\n    }\r\n\r\n    //* costInput\r\n    if (data.onUpdate !== 'inputCost') {\r\n      cleaveCost.setRawValue(data.cost);\r\n    }\r\n\r\n    //* costSlider\r\n    if (data.onUpdate !== 'costSlider') {\r\n      sliderCost.noUiSlider.set(data.cost);\r\n    }\r\n\r\n    //* peymentInput\r\n    if (data.onUpdate !== 'inputPayment')\r\n      cleavePayment.setRawValue(data.payment);\r\n\r\n    //* paymentSlider\r\n    if (data.onUpdate !== 'paymentSlider') {\r\n      sliderPayment.noUiSlider.set(data.paymentPercents * 100);\r\n    }\r\n\r\n    //* timeInput\r\n    if (data.onUpdate !== 'inputTime') cleaveTime.setRawValue(data.time);\r\n\r\n    //* timeSlider\r\n    if (data.onUpdate !== 'timeSlider') sliderTime.noUiSlider.set(data.time);\r\n  }\r\n\r\n  //* Order form\r\n  const openFormBtn = document.querySelector('#openFormBtn');\r\n  const orderForm = document.querySelector('#orderForm');\r\n  const submitFormBtn = document.querySelector('#submitFormBtn');\r\n\r\n  openFormBtn.addEventListener('click', function () {\r\n    orderForm.classList.remove('none');\r\n    openFormBtn.classList.add('none');\r\n  });\r\n  orderForm.addEventListener('submit', function (e) {\r\n    e.preventDefault();\r\n\r\n    //* Собираем данные с формы перед disabled\r\n    const formData = new FormData(orderForm);\r\n\r\n    //* disabled для формы и кнопки\r\n    submitFormBtn.setAttribute('disabled', true);\r\n    submitFormBtn.innerText = 'Заявка отправляется...';\r\n\r\n    orderForm\r\n      .querySelectorAll('input')\r\n      .forEach((input) => input.setAttribute('disabled', true));\r\n\r\n    fetchData();\r\n\r\n    async function fetchData() {\r\n      const data = Model.getData();\r\n      const results = Model.getResults();\r\n\r\n      let url = checkOnUrl(document.location.href);\r\n\r\n      function checkOnUrl(url) {\r\n        let urlArrayDot = url.split('.');\r\n        if (urlArrayDot.at(-1) === 'html') {\r\n          urlArrayDot.pop();\r\n          let newUrl = urlArrayDot.join('.');\r\n          let urlArraySlash = newUrl.split('/');\r\n          urlArraySlash.pop();\r\n          newUrl = urlArraySlash.join('/') + '/';\r\n\r\n          return newUrl;\r\n        }\r\n        return url;\r\n      }\r\n\r\n      const response = await fetch(url + 'mail.php', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({\r\n          form: {\r\n            name: formData.get('name'),\r\n            email: formData.get('email'),\r\n            phone: formData.get('phone'),\r\n          },\r\n          data,\r\n          results,\r\n        }),\r\n      });\r\n\r\n      const result = await response.text();\r\n      console.log(result);\r\n\r\n      submitFormBtn.removeAttribute('disabled', true);\r\n      submitFormBtn.innerText = 'Оформить заявку';\r\n\r\n      orderForm\r\n        .querySelectorAll('input')\r\n        .forEach((input) => input.removeAttribute('disabled', true));\r\n\r\n      orderForm.reset();\r\n      orderForm.classList.add('none');\r\n\r\n      if (result === 'SUCCESS') {\r\n        document.querySelector('#success').classList.remove('none');\r\n      } else {\r\n        document.querySelector('#error').classList.remove('none');\r\n      }\r\n    }\r\n  });\r\n});\r\n"]}